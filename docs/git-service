                        #####################################
                        ######## Github & Bitbucket #########
                        #####################################
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Github service: Github allows you to host an infinite number of projects as long as it remains in open source, you will have to pay for private projects and the price depends on the number of deposits you have

#Bitbucket service: allows you to host a free private project. On the other hand, you are limited in the number of collaborators, as your project and your team grows, you will be obliged to pay

#To use their services (Github & Bitbucket):
  > You should create a Github & Bitbucket account
  > Create an SSH key (useful to identify yourself during a push & pull) and import your 'PUBLIC' key in the parameter => 'securitE' tab => ssh keys
    |
    |-> note: you can generate an SSH key by entering the SSH menu of this script)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                ###################
                                ##### ISSUES ######
                                ###################

# issues: a communication system allowing you to keep abreast of the problems encountered on your project
  > We can create an issue by going to the menu after your git server:
    |
    |__let's imagine that a developer has created an issue # 1 with a brief description of his problem (# 1 is the tag of the issue)
    |
    |__When another developer has solved the problem, he will have to add during a commit what we call an ananclature (standard / naming of a commit) like this:
    | |__$ git commit -i -m "fixes # 1, <your comment>"
    | |__$ git push origin <branch>
    |
    |__this type of commit sent to the system resulting in the problem with tag # 1 having been successfully resolved (status => RESOLVED)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                 #################
                                 ##### FORK ######
                                 #################

#fork: a mirror of the original project, i-e to create your own version of the project by copying the original
  > When you fork a project, you will receive a new copy of the project (mirror)
    |
    |__the difference between fork and clone is like you have your own repository server, you will be working in your own repository and there is no record of the other author's repository. Also, if you just cloned the original repository, you cannot commit because it is in read-only mode. However, you can do this on the mirror repository
    |
    |__you can now clone the repository by typing the command:
    |  |__$ git clone <https url>
    |
    |__It is strongly recommended to work in another branch (not in the master branch), to avoid a conflict during a merge
       |__the original repository will not yet see your new branch because you only make a modification on the mirror of the latter (fork principle)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                             ########################
                             ##### PULL-REQUEST #####
                             ########################

# pull-request: globally, this system is used to ask the administrator of the original repository to accept your modification(s) in the mirrored repository
  > You choose in which branch you want to merge your modification (s)
     | |
     | |__base fork: this is the name of the original repository
     | |__base: master (the branch you want to merge with yours 'compare')
     | |
     | |__head fork: the name of the mirror repository
     | |__compare: the branch on which you made your modification(s)
     |
     |-> note: your message about the pull request should be as clear as possible so that the admin of the original repository has confidence in you, so accept the latter, you must always specify these 3 points:
        
                 * What is your request?
                 * Why did you make this change?
                 * Why will he have to accept it?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                             ########################
                             ##### FAST-FORWARD #####
                             ########################

# fast-forward: if you abandon your mirror repository a bit, it is possible that the original repository is in advance, and later you want to update yours, the solution is ...
  > Step 1: add a new remote called 'upstream' (a dedicated term for the update of a fork), to do this:
            |__$ git remote add upstream <https url> (the link from the original repository)
            |__$ git remote -v (to check the remote)
  > Step 2: retrieve the master branch (+ info) located on the newly created 'upstream' remote
            |__$ git fetch upstream
            |__$ git branch -a (to check the connection of the remote branch and the remote 'upstream')
  > Step 3: the fast-forward - this involves updating (merging) your mirror repository with the original repository
            |__$ git merge upstream / master (it will automatically get all info)

[WARNING]>> Never COMMIT on your MASTER branch even if it is a FORK which belongs to you, if you do, it will block the fast-forward (causes a synchronization conflict)